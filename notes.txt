To create a Django project on cmd type 
django-admin startproject project_name

To startup the server type
python3 manage.py runserver


To create a new app in a Django project use either
python manage.py startapp app_name
django-admin startapp app_name

First thing you do after creating an app is to copy the app
config class name in apps.py and put in settings.py under
INSTALLED_APP, for a member app it will be
'members.apps.MembersConfig'

To create tables for the default apps that came with Django
python manage.py migrate

To create subsequent tables or whenever a model is modified, the 3 code below should be ran
1. whenever you make changes to the django application
python manage.py makemigrations App_name
python manage.py makemigrations

The above command returns a filename starting with a number
eg 0001_initial.py, use 0001 to create the corresponding tables
to keep track.

2. To view the SQL statement that were executed from the migration above
python manage.py sqlmigrate App_name 0001

3. After the above, run this to finish the table creation
python manage.py migrate

To add data into the database taboe we use the interactive Django shell
python django shell

To interact with the tables we need to import the models into the shell,
an example to import a model Item present in models.py in the food app
from food.models import Item

To view the data in the Item table use
 Item.objects.all()

 To add data into the database table Item, with columns item_name,item_desc and item_price use objects eg
 a = Item(item_name="Pizza", item_desc="Cheesy Pizza", item_price=20)

 After adding an item, type the following to save the data into the database
 a.save()

 To get the unique id of the added object use either
 a.id 
 a.pk 

To create a super user and access the admin panel to that can manage the database 
python manage.py createsuperuser
 

 # whenever you use ImageField then pillow has to be installed to prevent error
 pip install pillow

 To add a model to the admin side, go to the admin.py on that app and register the model,
 Example to register the Item model put this in the admin page
admin.site.register(Item)


To change the path for uploaded images in your django application
On the settings.py, under Static files (CSS, JavaScript, Images)
BASE_DIR gives the current project directory, 'pictures' specifies
the new media directory. by default django saves images on the root directory
MEDIA_ROOT = os.path.join(BASE_DIR,'pictures')
MEDIA_URL = '/pictures/'

To get access to the static files like img uploaded by the use add this to settings.py
https://docs.djangoproject.com/en/5.1/howto/static-files/
from django.conf import settings
from django.conf.urls.static import static

urlpatterns += [
    # ... the rest of your URLconf goes here ...
] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


Django Signals is used to automate processes in a django operation
It ias the following
- A Signal dispatcher which informa the application of occured changes. 
  These changes can include user registration and sending signal to the
  profile, to create a profile for that user
To create a signal in users app, create a file called signals.py
Also, you also have to import in the signal in the app using the apps.py
  def ready(self):
        import users.signals

## Django views can also be created a class (class based views)

## In a django application the views are connected to the url.py file
## Next the views renders an html template

To export the database (eg sqlite3) from a django application 
By default, the SQLite database file is usually named db.sqlite3 and is located in the root directory of your Django project.
1. Download SQLite Tools, sqlite-tools-win32-x86 (https://sqlite.org/download.html), Precompiled Binaries for Window
2. Extract the contents of the downloaded ZIP file to a location on your computer (c:\sqlite)
3. Add SQLite to the System PATH by editing it under Environment Variables
4. Open a new terminal in VSCode, Type sqlite3 and press Enter. You should see the SQLite prompt
5. use the cd command to navigate to the directory where your db.sqlite3 file is located.
6. Run the Export Command: sqlite3 db.sqlite3 .dump > backup.sql


## To build a Restful API in a Django app, you need the Django rest framework, which can be installed via terminal.
pip install djangorestframwork

After which you need to register the restframework under INSTALLED_APPS in the settings.py
'rest_framework'

## in order to generate a JSON response for an API, we take data in the django models and convert it to JSON using 
## serializers or serialization. This can be done by creating a serializer in a file called serializers.py within yoyr app.
## Import it from => from rest_framework import serializers


## To add image field to the model or API, insal pillow, a package for working with images in django
pip install pillow